//{ Driver Code Starts
// C++ program to evaluate value of a postfix expression

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution
{a
    public:
    //Function to evaluate a postfix expression.
    int stackOrder(string s){
        stack<int>st;
        int n  = s.size();
        int j=0;
        // for(int i=0;i<n;i++){
            while(j<n){
            if(s[j]>='0' && s[j]<='9')
            st.push(s[j]-'0');
            else if(s[j] == '+'){
            int t1 = st.top();
            st.pop();
            int t2 = st.top();
            st.pop();
            int res = t2 + t1;
            st.push(res);
                
            }
            else if(s[j] == '-'){
            int t1 = st.top();
            st.pop();
            int t2 = st.top();
            st.pop();
            int res = t2 - t1;
            st.push(res);
                
            }
           else  if(s[j] == '*'){
            int t1 = st.top();
            st.pop();
            int t2 = st.top();
            st.pop();
            int res = t2 * t1;
            st.push(res);
                
            }
          else   if(s[j] == '/'){
            int t1 = st.top();
            st.pop();
            int t2 = st.top();
            st.pop();
            int res = t2 / t1;
            st.push(res);
                
            }
        j++;
        }
        return st.top();
    }
    int evaluatePostfix(string S)
    {
        // Your code here
        int ans = stackOrder(S);
        return ans;
    }
};


//{ Driver Code Starts.

// Driver program to test above functions
int main()
{
    int t;
    cin>>t;
    cin.ignore(INT_MAX, '\n');
    while(t--)
    {
        string S;
        cin>>S;
        Solution obj;
    
    cout<<obj.evaluatePostfix(S)<<endl;
    }
    return 0;
}

// } Driver Code Ends
